# title:   game title
# author:  game developers, email, etc.
# desc:    short description
# site:    website link
# license: MIT License (change this to your license of choice)
# version: 0.1
# script:  python
import math
import random

def rnd_bool(): return random.choice([True, False])

class Smoke:
 colors=[0,15,14,13,12]
 def __init__(self,x,y):
  self.x=x
  self.y=y
  self.cpt=0
  self.color=0
  self.radius=1
 
 def sk_update(self):
  self.cpt+=1
  if self.cpt%8 and rnd_bool(): self.color+=1
  if self.cpt%35 and rnd_bool(): self.radius+=1
  else: self.x-=1
  if self.cpt%16 and rnd_bool(): self.y+=1  
  return self.color>=len(Smoke.colors)
  
class Cam:
  def __init__(self):
   self.focus_x=int(240/2)
   self.focus_y=int(136/2)
   self.obj_x=self.focus_x
   self.obj_y=self.focus_y
  def c_map(self, target_x, target_y):
   self.focus_x=target_x # focus is in screen coordinates
   self.focus_y=target_y
   
   x=Cam.c_compute(self.focus_x,15,240-32)
   y=Cam.c_compute(self.focus_y,8,136-17)
   
   x_offset=Cam.c_compute_offset(120,1800,self.focus_x)
   y_offset=Cam.c_compute_offset(64,1088-64,self.focus_y)

   self.obj_x=Cam.c_compute_obj(self.focus_x,120)
   self.obj_y=Cam.c_compute_obj(self.focus_y,64)
   map(
    int(x),int(y),
    32,18,
    int(-x_offset),int(-y_offset))
  
  def c_compute_obj(focus,map_center):
   obj=-(focus-map_center)
   return min(0,obj)
  def c_compute_offset(lower,upper,cp):
   if cp>lower and cp<upper:
    return int(cp)%8
   return 0
  def c_compute(focus,map_center,map_upper):
   v=focus/8-map_center
   v=max(0,v)
   return min(map_upper,v)
  
  def c_mget(self,x,y):
   return mget(int(x/8),int(y/8))
  def c_spr(self, index, x, y, color, rotation):
   spr(index,int(self.obj_x+x),int(self.obj_y+y),color,1,0,rotation)
  def c_cir(self,x,y,radius,color):
   circ(
    int(self.obj_x+x),
    int(self.obj_y+y),
    radius,color)
   
class Car:
 def __init__(self, x, y, speed, angle):
  self.x = x
  self.y = y
  self.speed = speed
  self.angle = angle
  self.dir = angle
  self.drift_factor = 0.7

 def p_steer(self, turn_angle):
  self.angle += turn_angle
  self.dir += turn_angle
  
 def p_mv_x(self): return math.cos(self.dir)*self.speed
 def p_mv_y(self): return math.sin(self.dir)*self.speed
 def p_update(self):
  self.x+=self.p_mv_x()
  self.y+=self.p_mv_y()
  self.speed*=0.98

 def p_drift(self):
  self.speed *= self.drift_factor
 angle_sprite={
  0:(256,0),
  1:(257,0),
  2:(258,0),
  3:(259,0),
  
  4:(256,1),
  5:(257,1),
  6:(258,1),
  7:(259,1),
  
  8:(256,2),
  9:(257,2),
  10:(258,2),
  11:(259,2),
  
  12:(256,3),
  13:(257,3),
  14:(258,3),
  15:(259,3)
 }
 def p_sprite(self):
  index=math.degrees(self.dir)
  while index<0: index+=360
  index+=(360/22.5)*0.75 # shift
  index=int(index)%360
  index/=22.5
  return self.angle_sprite[int(index)]
 
 def p_collided(self):
  #self.dir+=math.pi
  self.speed*=-0.5
  self.p_update()

player=Car(10,10,1,0)
cam=Cam()
smokes=[]
frame=0

def TIC():
 g_logic()
 g_draw()

def g_draw():
 global player
 global smokes
 cls(13)
 p_spr=player.p_sprite()
 cam.c_map(player.x, player.y)
 cam.c_spr(p_spr[0],player.x,player.y,0,p_spr[1])
 tile=cam.c_mget(player.x,player.y)
 for s in smokes: 
  cam.c_cir(s.x,s.y,s.radius,Smoke.colors[s.color])

def g_logic():
 global player
 global cam
 global smokes
 global frame
 frame+=1
 max_speed=2

 if btn(0): player.speed+=0.05
 if btn(1) and player.speed>0: player.speed-=0.05
 if btn(2): player.p_steer(-0.03)
 if btn(3): player.p_steer(0.03)

 if player.speed>max_speed:
  player.speed=max_speed
 if player.speed<-max_speed:
  player.speed=-max_speed
  
 player.p_update()
 tile=cam.c_mget(player.x+4,player.y+4)
 if tile!=16:
  player.p_collided()
 
 if frame%10==0: 
  smokes.append(Smoke(player.x,player.y))
 to_remove=[]
 for s in smokes: if(s.sk_update()): to_remove.append(s)
 for s in to_remove: smokes.remove(s)
